#!/usr/bin/env python3
""" Use this to rename my BSPWM workspaces to icons
NOTE TO SELF. I USE THE SHELL SCRIPT NOW INSTEAD
"""

import re
import subprocess

## ENTER THE CLASSNAME FROM `bspc query --tree` IN LOWERCASE
icons_dict = {
    "alacritty": "",
    "firefox": "",
    "mpv": "",
    "signal": "",
    "pidgin": "",
    "tor browser": "﨩",
    "jftui": "ﴽ",
    "steam": "",
    "newsboat": "",
    "zathura": "",
    "neomutt": "",
}

# Edit this with info from bspc query --desktops
# Determine desktop names
desktops = subprocess.Popen(
    "bspc query --desktops", stdout=subprocess.PIPE, shell=True
).communicate()
desktops = desktops[0]
desktops = desktops.split(b"\n")
desktops.pop(-1)
desktops_dict = {}
n = 1
for element in desktops:
    desktops_dict.update({element.decode("utf-8"): str(n)})
    n += 1


def check_desktop_classes(desktop):
    """
    checks what windows are open on a desktop and adds them to a list
    """
    my_cmd = f"bspc query --tree --desktop {desktop}"
    items = []
    raw_output = subprocess.Popen(
        [my_cmd], stdout=subprocess.PIPE, shell=True
    ).communicate()
    raw_output = str(raw_output)
    regexed_output = re.findall('"className":".*?"', raw_output)
    for item in regexed_output:
        # keep only text after :" and before "
        items.append(re.findall(':"(.*)"', item)[0].lower())
    return items


def create_desktop_name(desktop):
    """Loops over list of applications, and turns it into a string of icons"""
    desktop_name = ""
    output = check_desktop_classes(desktop)
    desktop_name += f"{desktops_dict[desktop]}"
    for item in output:
        if item in icons_dict:
            desktop_name += f" {icons_dict[item]}"
        else:
            desktop_name += " ^"

    return desktop_name


def set_desktop_name(desktop):
    """Runs bspc coommand to change desktop name"""
    desktop_name = create_desktop_name(desktop)
    my_cmd = f'bspc desktop {desktop} --rename "{desktop_name}"'
    subprocess.call([my_cmd], shell=True)


def rename_all_desktops(desktops):
    """Loops over desktops and renames all"""
    desktop_list = []
    for element in desktops:
        desktop_list.append(element.decode("utf-8"))
    for desktop in desktop_list:
        set_desktop_name(desktop)


if __name__ == "__main__":
    rename_all_desktops(desktops)
