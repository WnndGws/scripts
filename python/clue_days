#!/usr/bin/env python3
"""
Returns random days where either a red card or a black card is shown
"""

import datetime
import itertools
import random

# Set up dates used
current_year = int(datetime.datetime.strftime(datetime.datetime.now(), "%Y"))
this_month = int(datetime.datetime.strftime(datetime.datetime.now(), "%m"))
next_month = this_month + 1
days_next_month = (
    datetime.date(current_year, next_month, 1)
    - datetime.date(current_year, this_month, 1)
).days


def get_leftover_deck():
    # Set up deck of cards
    card_numbers = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]
    black_suites = ["C", "S"]
    red_suites = ["D", "H"]
    red_deck = []
    black_deck = []
    for number, suite in itertools.product(card_numbers, black_suites):
        black_deck.append(f"{number}{suite}")
    for number, suite in itertools.product(card_numbers, red_suites):
        red_deck.append(f"{number}{suite}")
    random.shuffle(black_deck)
    random.shuffle(red_deck)

    while int(len(red_deck)) > 3:
        # Set up dice rolls
        roll_count = 0
        black_rolls = 0
        red_rolls = 0
        roll_colour = random.choices(["b", "r"], weights=[0.5, 0.5], k=1)[0]

        # Remove cards
        if roll_colour == "b":
            try:
                del black_deck[0]
            except:
                pass
        else:
            try:
                del red_deck[0]
            except:
                pass

    leftover_deck = red_deck + black_deck
    return leftover_deck


leftover_deck = ()
while not 5 < len(leftover_deck) < 8:
    leftover_deck = get_leftover_deck()
three_random_days = random.sample(range(1, days_next_month), k=3)
three_random_days.sort()
required_days = len(leftover_deck) - 3
print(required_days)
i = 0
while required_days > 0:
    if i < 3:
        three_random_days.append(three_random_days[i] + random.randrange(0, 3))
        i += 1
        required_days -= 1
    if i >= 3:
        three_random_days.append(random.randrange(1, days_next_month))
        i += 1
        required_days -= 1
days = list(zip(three_random_days, leftover_deck))
days.sort(key=lambda tup: tup[0])
print(days)

# print(locals())
