#!/usr/bin/env python3
"""Written to replace the next_event2.
Checks Google Calendar for next event and displays it nicely
"""
import datetime
import os
import re
import sys

import httplib2
import humanize
from apiclient import discovery
from oauth2client import client, tools
from oauth2client.file import Storage
from pytz import timezone

# python-oauth2client
# python-google-api-python-client

# Next set up the Google Calendar scopes and files for the authentication flow
FLAGS = None
SCOPES = "https://www.googleapis.com/auth/calendar.readonly"
APPLICATION_NAME = "Next Event"

if "XDG_CONFIG_HOME" in os.environ:
    BASE_DIR = os.path.expandvars("$XDG_CACHE_HOME")
    XDG_DIR = os.path.join(BASE_DIR, "credentials")
    if not os.path.exists(XDG_DIR):
        os.makedirs(XDG_DIR)
    CLIENT_SECRET_FILE = os.path.join(XDG_DIR, "nextevent_secrets.json")
    # Quit if file doesnt exist since Next Event doesnt work without it
    if not os.path.isfile(CLIENT_SECRET_FILE):
        print(
            f'Please create "{CLIENT_SECRET_FILE}" and run nextevent again.\
              (see https://stackoverflow.com/a/55416898 for help on how to do this)'
        )
        sys.exit()
    CREDENTIAL_FILE = os.path.join(XDG_DIR, "nextevent_credentials.json")
else:
    BASE_DIR = os.path.expanduser("~")
    CLIENT_SECRET_FILE = os.path.join(BASE_DIR, ".nextevent_secrets")
    # Quit if file doesnt exist since Next Event doesnt work without it
    if not os.path.isfile(CLIENT_SECRET_FILE):
        print(
            f'Please create "{CLIENT_SECRET_FILE}" and run nextevent again.\
              (see https://stackoverflow.com/a/55416898 for help on how to do this)'
        )
        sys.exit()
    CREDENTIAL_FILE = os.path.join(BASE_DIR, ".nextevent_credentials")


def get_credentials():
    """Gets valid user credentials from storage.

    If nothing has been stored, or if the stored credentials are invalid,
    the OAuth2 flow is completed to obtain the new credentials.

    Returns:
    Credentials, the obtained credential.
    """

    store = Storage(CREDENTIAL_FILE)
    credentials = store.get()
    if not credentials or credentials.invalid:
        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
        flow.user_agent = APPLICATION_NAME
        credentials = tools.run_flow(flow, store, FLAGS)
        print("Storing credentials to " + CREDENTIAL_FILE)
    return credentials


def getnextevent():
    """Loops through all calendars and prints the next even in each one"""

    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build("calendar", "v3", http=http)

    # 'Z' needed for calendar API
    now = datetime.datetime.utcnow().isoformat() + "Z"  # 'Z' indicates UTC time

    # Needed to change times to non-naive
    location = "Australia/Perth"
    tz = timezone(location)
    page_token = None

    calendar_list = service.calendarList().list(pageToken=page_token).execute()

    # Get next event in each calendar and add it to 'event_list'
    event_list = []
    for calendar_list_entry in calendar_list["items"]:
        event_result = (
            service.events()
            .list(
                calendarId=calendar_list_entry["id"],
                timeMin=now,
                singleEvents=True,
                orderBy="startTime",
                maxResults=1,
            )
            .execute()
        )
        event = event_result.get("items", [])
        if event != []:
            event_list.extend(event)

    # Set far into future lowest start to begin with
    lowest_start_time = datetime.datetime(2050, 1, 1)
    for event in event_list:
        if "dateTime" in event["start"]:
            try:
                # Need to strp info into a datetime, then add UTC offset, so can have all times in local time
                start_time = datetime.datetime.strptime(
                    event["start"]["dateTime"], "%Y-%m-%dT%H:%M:%SZ"
                ) + tz.utcoffset(datetime.datetime.now())
            except:
                # If dateTime already includes offset, then strip the +08
                # Doesnt affect output, just creates naive datetime
                # Need to subtract 08 from offset since I am GMT+8
                start_time = event["start"]["dateTime"]
                try:
                    offset = (int(start_time[-5:-3]) * -1) + 8
                    start_time = f"{start_time[:-6]}Z"
                except ValueError:
                    offset = 8
                start_time = datetime.datetime.strptime(
                    start_time, "%Y-%m-%dT%H:%M:%SZ"
                ) + datetime.timedelta(hours=offset)
            start_time_test = start_time
        elif "date" in event["start"]:
            start_time = datetime.datetime.strptime(event["start"]["date"], "%Y-%m-%d")
            # When making comparisons, an All day event only comes 1st if it there is nothing else that day
            start_time_test = start_time + datetime.timedelta(seconds=86399)
        if start_time_test < lowest_start_time:
            lowest_start_time = start_time_test
            lowest_title = event["summary"]

    if re.match(r"^JOB-\d*.*", lowest_title) is not None:
        lowest_title = "Work"
    if re.match(r"^Forecast.*", lowest_title) is not None:
        info = re.findall(r"(?<=\().*(?=\))", lowest_title)
        lowest_title = f"{info[0]}"
    if len(lowest_title) > 15:
        lowest_title = f"{lowest_title[:5]}â€¦{lowest_title[-5:]}"

    if lowest_start_time.second == 59:
        print(f"All Day - {lowest_title}")
    else:
        print(
            # f'{humanize.naturalday(lowest_start_time).capitalize()}-{datetime.datetime.strftime(lowest_start_time, "%H:%M")}-{lowest_title}'
            f'{datetime.datetime.strftime(lowest_start_time, "%H:%M")}-{lowest_title}'
        )


if __name__ == "__main__":
    getnextevent()
