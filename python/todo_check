#!/usr/bin/env python3
"""Written to replace the next_event2.
Checks Google Calendar for next event and displays it nicely.
"""

import datetime
import os
import sys

import dateutil
import httplib2
from apiclient import discovery
from oauth2client import client, tools
from oauth2client.file import Storage
from pytz import timezone

# python-oauth2client
# python-google-api-python-client

# Next set up the Google Calendar scopes and files for the authentication flow
FLAGS = None
SCOPES = "https://www.googleapis.com/auth/calendar.readonly"
APPLICATION_NAME = "Next Event"

if "XDG_CONFIG_HOME" in os.environ:
    BASE_DIR = os.path.expandvars("$XDG_CACHE_HOME")
    XDG_DIR = os.path.join(BASE_DIR, "credentials")
    if not os.path.exists(XDG_DIR):
        os.makedirs(XDG_DIR)
    CLIENT_SECRET_FILE = os.path.join(XDG_DIR, "nextevent_secrets.json")
    # Quit if file doesnt exist since Next Event doesnt work without it
    if not os.path.isfile(CLIENT_SECRET_FILE):
        print(
            f'Please create "{CLIENT_SECRET_FILE}" and run nextevent again.\
              (see https://stackoverflow.com/a/55416898 for help on how to do this)',
        )
        sys.exit()
    CREDENTIAL_FILE = os.path.join(XDG_DIR, "nextevent_credentials.json")
else:
    BASE_DIR = os.path.expanduser("~")
    CLIENT_SECRET_FILE = os.path.join(BASE_DIR, ".nextevent_secrets")
    # Quit if file doesnt exist since Next Event doesnt work without it
    if not os.path.isfile(CLIENT_SECRET_FILE):
        print(
            f'Please create "{CLIENT_SECRET_FILE}" and run nextevent again.\
              (see https://stackoverflow.com/a/55416898 for help on how to do this)',
        )
        sys.exit()
    CREDENTIAL_FILE = os.path.join(BASE_DIR, ".nextevent_credentials")


def get_credentials():
    """Gets valid user credentials from storage.

    If nothing has been stored, or if the stored credentials are invalid,
    the OAuth2 flow is completed to obtain the new credentials.

    Returns:
    Credentials, the obtained credential.
    """
    store = Storage(CREDENTIAL_FILE)
    credentials = store.get()
    if not credentials or credentials.invalid:
        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
        flow.user_agent = APPLICATION_NAME
        credentials = tools.run_flow(flow, store, FLAGS)
        print("Storing credentials to " + CREDENTIAL_FILE)
    return credentials


def add_events():
    """Loops through all calendars and prints the next even in each one."""
    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build("calendar", "v3", http=http)

    # 'Z' needed for calendar API
    now = datetime.datetime.utcnow().isoformat() + "Z"  # 'Z' indicates UTC time
    today = datetime.date.today().isoformat()
    tomorrow = datetime.date.today() + datetime.timedelta(days=1)
    tomorrow = tomorrow.isoformat()

    # Needed to change times to non-naive
    location = "Australia/Sydney"
    tz = timezone(location)
    page_token = None

    calendar_list = service.calendarList().list(pageToken=page_token).execute()

    # Get next event in each calendar and add it to 'event_list'
    event_list = []
    for calendar_list_entry in calendar_list["items"]:
        event_result = (
            service.events()
            .list(
                calendarId=calendar_list_entry["id"],
                timeMin=f"{today}T00:00:00Z",
                timeMax=f"{tomorrow}T08:00:00Z",
                singleEvents=True,
                orderBy="startTime",
                maxResults=10,
            )
            .execute()
        )
        event = event_result.get("items", [])
        if event != []:
            event_list.extend(event)

    for event in event_list:
        try:
            if event["start"]["dateTime"][:10] == today:
                print_time = (
                    dateutil.parser.parse(event["start"]["dateTime"])
                    .astimezone(timezone("Australia/Sydney"))
                    .strftime("%H:%M")
                )
                print(f'[ ] {print_time} - {event["summary"]}')
        except KeyError:
            pass


if __name__ == "__main__":
    add_events()
